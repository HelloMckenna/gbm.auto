source('/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.map.R')
source('/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
source('/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.rsb.R')
source('/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
source('/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.valuemap.R')
mysamples <- read.csv("/home/simon/Dropbox/Galway/Project Sections/3b. BRT plus Bpa Sam & Dave/Data/Samples_allRays_Env_F_E_NoGrain.csv", header = TRUE, row.names = NULL)
mygrids <- read.csv("/home/simon/Dropbox/Galway/Project Sections/2. Spatial subsets inc fishery data/Data/Maps/Juveniles/grids_Enviro_HansLPUE_MI&MMOlog_MIscallopVMS_MMOWhelk_MMOScal_Dist2Srvy_Preds_IS_NA_HansE_NoGrain.csv", header = TRUE)
setwd("/home/simon/Dropbox/Galway/Project Sections/3b. BRT plus Bpa Sam & Dave/Analysis/Model Outputs/With E")
library(mapplots)
data(coast)
shape = coast
gbm.auto(expvar = c(4:7, 9, 11), resvar = 12, grids = mygrids, lr = c(0.005), tc = 2, ZI = TRUE, savegbm = FALSE, mapshape = coast)
warnings()
gbm.auto(expvar = c(4:7, 9, 11), resvar = 12, grids = mygrids, lr = c(0.005), tc = 2, ZI = TRUE, savegbm = FALSE, mapshape = coast)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
gbm.auto(expvar = c(4:7, 9, 11), resvar = 12, grids = mygrids, lr = c(0.005), tc = 2, ZI = TRUE, savegbm = FALSE, mapshape = coast)
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
document()
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
devtools::install_github('SimonDedman/gbm.auto')
mysamples <- read.csv("/home/simon/Dropbox/Galway/Project Sections/3b. BRT plus Bpa Sam & Dave/Data/Samples_allRays_Env_F_E_NoGrain.csv", header = TRUE, row.names = NULL)
mygrids <- read.csv("/home/simon/Dropbox/Galway/Project Sections/2. Spatial subsets inc fishery data/Data/Maps/Juveniles/grids_Enviro_HansLPUE_MI&MMOlog_MIscallopVMS_MMOWhelk_MMOScal_Dist2Srvy_Preds_IS_NA_HansE_NoGrain.csv", header = TRUE)
setwd("/home/simon/Dropbox/Galway/Project Sections/3b. BRT plus Bpa Sam & Dave/Analysis/Model Outputs/With E")
library(mapplots)
data(coast)
shape = coast
gbm.auto(expvar = c(4:7, 9, 11), resvar = 12, grids = mygrids, lr = c(0.005, 0.001), ZI = TRUE, savegbm = FALSE, mapshape = coast)
gbm.auto(expvar = c(4:7, 9, 11), resvar = 12, grids = mygrids, lr = c(0.005), ZI = TRUE, savegbm = FALSE, mapshape = coast)
print("L271")
print("L273")
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
gbm.auto(expvar = c(4:7, 9, 11), resvar = 12, grids = mygrids, lr = c(0.005), ZI = TRUE, savegbm = FALSE, mapshape = coast)
devtools::install_github('SimonDedman/gbm.auto')
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
mysamples <- read.csv("/home/simon/Dropbox/Galway/Project Sections/3b. BRT plus Bpa Sam & Dave/Data/Samples_allRays_Env_F_E_NoGrain.csv", header = TRUE, row.names = NULL)
mygrids <- read.csv("/home/simon/Dropbox/Galway/Project Sections/2. Spatial subsets inc fishery data/Data/Maps/Juveniles/grids_Enviro_HansLPUE_MI&MMOlog_MIscallopVMS_MMOWhelk_MMOScal_Dist2Srvy_Preds_IS_NA_HansE_NoGrain.csv", header = TRUE)
# set directory, with fishing E as an expvar
setwd("/home/simon/Dropbox/Galway/Project Sections/3b. BRT plus Bpa Sam & Dave/Analysis/Model Outputs/With E")
# load mapplots coast and set as shape
library(mapplots)
data(coast)
shape = coast
# run gbm.autos, NoGrain; cuckoo
gbm.auto(expvar = c(4:7, 9, 11), resvar = 12, grids = mygrids, lr = c(0.005), ZI = TRUE, savegbm = FALSE, mapshape = coast)
warnings()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
detach("package:gbm.auto", unload=TRUE)
devtools::install_github('SimonDedman/gbm.auto')
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
rm(ls())
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
mysamples <- read.csv("/home/simon/Dropbox/Galway/Project Sections/3b. BRT plus Bpa Sam & Dave/Data/Samples_allRays_Env_F_E_NoGrain.csv", header = TRUE, row.names = NULL)
mygrids <- read.csv("/home/simon/Dropbox/Galway/Project Sections/2. Spatial subsets inc fishery data/Data/Maps/Juveniles/grids_Enviro_HansLPUE_MI&MMOlog_MIscallopVMS_MMOWhelk_MMOScal_Dist2Srvy_Preds_IS_NA_HansE_NoGrain.csv", header = TRUE)
# set directory, with fishing E as an expvar
setwd("/home/simon/Dropbox/Galway/Project Sections/3b. BRT plus Bpa Sam & Dave/Analysis/Model Outputs/With E")
# load mapplots coast and set as shape
library(mapplots)
data(coast)
shape = coast
# run gbm.autos, NoGrain; cuckoo
gbm.auto(expvar = c(4:7, 9, 11), resvar = 12, grids = mygrids, lr = c(0.005), ZI = TRUE, savegbm = FALSE, mapshape = coast)
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
document()
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
devtools::install_github('SimonDedman/gbm.auto')
mysamples <- read.csv("/home/simon/Dropbox/Galway/Project Sections/3b. BRT plus Bpa Sam & Dave/Data/Samples_allRays_Env_F_E_NoGrain.csv", header = TRUE, row.names = NULL)
mygrids <- read.csv("/home/simon/Dropbox/Galway/Project Sections/2. Spatial subsets inc fishery data/Data/Maps/Juveniles/grids_Enviro_HansLPUE_MI&MMOlog_MIscallopVMS_MMOWhelk_MMOScal_Dist2Srvy_Preds_IS_NA_HansE_NoGrain.csv", header = TRUE)
# set directory, with fishing E as an expvar
setwd("/home/simon/Dropbox/Galway/Project Sections/3b. BRT plus Bpa Sam & Dave/Analysis/Model Outputs/With E")
# load mapplots coast and set as shape
library(mapplots)
data(coast)
shape = coast
# run gbm.autos, NoGrain; cuckoo
gbm.auto(expvar = c(4:7, 9, 11), resvar = 12, grids = mygrids, lr = c(0.005), ZI = TRUE, savegbm = FALSE, mapshape = coast)
gbm.auto
detach("package:gbm.auto", unload=TRUE)
devtools::install_github('SimonDedman/gbm.auto')
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
gbm.auto
detach("package:gbm.auto", unload=TRUE)
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
devtools::install_github('SimonDedman/gbm.auto')
detach("package:gbm.auto", unload=TRUE)
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
gbm.auto
devtools::install_github('SimonDedman/gbm.auto', force = TRUE)
gbm.auto
detach("package:beepr", unload=TRUE)
detach("package:devtools", unload=TRUE)
detach("package:dismo", unload=TRUE)
detach("package:gbm", unload=TRUE)
detach("package:gbm.auto", unload=TRUE)
detach("package:labeling", unload=TRUE)
detach("package:mapplots", unload=TRUE)
detach("package:raster", unload=TRUE)
detach("package:sp", unload=TRUE)
detach("package:datasets", unload=TRUE)
library("datasets", lib.loc="/usr/lib/R/library")
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
devtools::install_github('SimonDedman/gbm.auto', force = TRUE)
setwd("/home/simon/Dropbox/Galway/Project Sections/4b. Methods Paper BRT/Chuck's gbmauto attempts/")
grids <- read.csv("Abundance_Preds_only_Fall1.csv")
detach("package:gbm.auto", unload=TRUE)
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
png(filename = "ChuckRunSandbar.png", width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0),xpd = FALSE)
library("maptools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
chuckmap <- readShapePoly("./CroppedMap/Fall_Crop_Map")
png(filename = "ChuckRunSandbar.png", width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0),xpd = FALSE)
gbm.map(x = grids[,1], y = grids[,2], z = grids[,3], species = "Sandbar", legendtitle = "CPUE", shape = chuckmap)
dev.off()
document()
document()
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
document()
document()
document()
warnings()
document()
library(gbm.auto)
showNonASCIIfile("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.valuemap.R")
library("tools", lib.loc="/usr/lib/R/library")
showNonASCIIfile("/home/simon/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.valuemap.R")
document()
library(gbm.auto)
document()
document()
document()
document()
document()
document()
document()
warnings()
library(gbm.auto)
document()
library(gbm.auto)
document()
document()
devtools::install_github('SimonDedman/gbm.auto', force = TRUE)
warnings()
gbm.auto
mysamples <- read.csv("/home/simon/Dropbox/Galway/Project Sections/3b. BRT plus Bpa Sam & Dave/Data/Samples_allRays_Env_F_E_NoGrain.csv", header = TRUE, row.names = NULL)
mygrids <- read.csv("/home/simon/Dropbox/Galway/Project Sections/2. Spatial subsets inc fishery data/Data/Maps/Juveniles/grids_Enviro_HansLPUE_MI&MMOlog_MIscallopVMS_MMOWhelk_MMOScal_Dist2Srvy_Preds_IS_NA_HansE_NoGrain.csv", header = TRUE)
# set directory, with fishing E as an expvar
setwd("/home/simon/Dropbox/Galway/Project Sections/3b. BRT plus Bpa Sam & Dave/Analysis/Model Outputs/With E")
# load mapplots coast and set as shape
library(mapplots)
data(coast)
shape = coast
gbm.auto(expvar = c(4:7, 9, 11), resvar = 12, grids = mygrids, lr = c(0.005), ZI = TRUE, savegbm = FALSE, mapshape = coast)
gbm.auto(expvar = c(4:7, 9, 11), resvar = 12, grids = mygrids, samples = mysamples, lr = c(0.005), ZI = TRUE, savegbm = FALSE, mapshape = coast)
document()
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
setwd("/home/simon/Dropbox/Galway/Project Sections/4b. Methods Paper BRT/Chuck's gbmauto attempts/PamlicoSoundSamples.csv")
setwd("/home/simon/Dropbox/Galway/Project Sections/4b. Methods Paper BRT/Chuck's gbmauto attempts")
sharks<-read.csv("PamlicoSoundSharks.csv", header=TRUE)
grids<-read.csv("PamlicoSoundSamples.csv", header=TRUE, row.names=NULL)
library("maptools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
chuckmap <- readShapeSpatial("./CroppedMap/Fall_Crop_Map")
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=3, gridslon=4, map=TRUE, pngtype="cairo-png", varint=TRUE, simp=TRUE, max.trees=28000, mapshape = chuckmap)
setwd("./SmoothDogfish")
png(filename = "SmoothDogFish.png", width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0),xpd = FALSE)
preds <- read.csv("Abundance_Preds_Only.csv")
preds <- read.csv("Abundance_Preds_only.csv")
gbm.map(x = grids[,4],
y = grids[,3],
z = preds[,predabund],
species = "SmoothDogfish",
legendtitle = "CPUE")
gbm.map(x = grids[,3],
y = grids[,4],
z = preds[,predabund],
species = "SmoothDogfish",
legendtitle = "CPUE")
gbm.map(x = preds[,2],
y = preds[,1],
z = preds[,predabund],
species = "SmoothDogfish",
legendtitle = "CPUE")
traceback()
require(mapplots)
library(mapplots)
bydist <- rep(NA, length(preds[,2]))
cells <- data.frame(LONGITUDE = preds[,2], bydist = bydist, stringsAsFactors = FALSE)
cells[2:(length(preds[,2]) - 1),"bydist"] <-
ifelse(round(cells[2:(length(preds[,2]) - 1),1] - cells[1:(length(preds[,2]) - 2),1], digits = 5)
==
round(cells[3:length(preds[,2]),1] - cells[2:(length(preds[,2]) - 1),1], digits = 5),
round(cells[2:(length(preds[,2]) - 1),1] - cells[1:(length(preds[,2]) - 2),1], digits = 5), NA)
byx <- mean(cells$bydist, na.rm = TRUE)
cells[2:(length(preds[,1]) - 1),"bydist"] <-
ifelse(round(cells[2:(length(preds[,1]) - 1),1] - cells[1:(length(preds[,1]) - 2),1], digits = 5)
==
round(cells[3:length(preds[,1]),1] - cells[2:(length(preds[,1]) - 1),1], digits = 5),
round(cells[2:(length(preds[,1]) - 1),1] - cells[1:(length(preds[,1]) - 2),1], digits = 5), NA)
byx <- mean(cells$bydist, na.rm = TRUE)
View(cells)
setwd("/home/simon/Dropbox/Galway/Project Sections/4b. Methods Paper BRT/Chuck's gbmauto attempts")
sharks<-read.csv("PamlicoSoundSharks.csv", header=TRUE)
grids<-read.csv("FallGrid.csv", header=TRUE, row.names=NULL)
library("maptools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
chuckmap <- readShapeSpatial("./CroppedMap/Fall_Crop_Map")
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=4, gridslon=3, map=TRUE, pngtype="cairo-png", varint=TRUE, simp=TRUE, max.trees=28000, mapshape = chuckmap)
legend.grid
install.packages("R.utils")
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
devtools::install_github('SimonDedman/gbm.auto', force = TRUE)
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
setwd("/home/simon/Dropbox/Galway/Project Sections/4b. Methods Paper BRT/Chuck's gbmauto attempts")
sharks<-read.csv("PamlicoSoundSharks.csv", header=TRUE)
grids<-read.csv("FallGrid.csv", header=TRUE, row.names=NULL)
library("maptools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
chuckmap <- readShapeSpatial("./CroppedMap/Fall_Crop_Map")
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=3, gridslon=4, map=TRUE, pngtype="cairo-png", varint=TRUE, simp=TRUE, max.trees=28000, mapshape = chuckmap)
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=3, gridslon=4, map=TRUE, pngtype="cairo-png", varint=FALSE, simp=FALSE, max.trees=28000, mapshape = chuckmap)
grids <- read.csv("./SmoothDogfish/Abundance_Preds_only.csv")
png(filename = "ChuckRunSandbar.png", width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0),xpd = FALSE)
gbm.map(x = grids[,1], y = grids[,2], z = grids[,3], species = "SmothDogfish", legendtitle = "CPUE", shape = chuckmap)
dev.off()
grids<-read.csv("FallGrid.csv", header=TRUE, row.names=NULL)
getwd()
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=4, gridslon=3, map=TRUE, pngtype="cairo-png", varint=FALSE, simp=FALSE, max.trees=28000, mapshape = chuckmap)
shape <- chuckmap
png(filename = "./SmoothDogfish/SmoothDogManual.png", width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0),xpd = FALSE)
preds <- read.csv("./SmoothDogfish/Abundance_Preds_only.csv")
gbm.map(x = grids[,3], y = grids[,4], z = preds[,3], species = "SmoothDogfish", legendtitle = "CPUE", shape = chuckmap)
dev.off()
install.packages("shapefiles")
library("shapefiles", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
chuckmap <- read.shapefile("./CroppedMap/Fall_Crop_Map")
png(filename = "./SmoothDogfish/SmoothDogManual2.png", width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0),xpd = FALSE)
gbm.map(x = grids[,3], y = grids[,4], z = preds[,3], species = "SmoothDogfish", legendtitle = "CPUE", shape = chuckmap)
dev.off()
document()
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
devtools::install_github('SimonDedman/gbm.auto', force = TRUE)
setwd("/home/simon/Dropbox/Galway/Project Sections/4b. Methods Paper BRT/Chuck's gbmauto attempts")
sharks<-read.csv("PamlicoSoundSharks.csv", header=TRUE)
grids<-read.csv("FallGrid.csv", header=TRUE, row.names=NULL)
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=4, gridslon=3, map=TRUE, pngtype="cairo-png", varint=FALSE, simp=FALSE, max.trees=28000)
devtools::install_github('SimonDedman/gbm.auto', force = TRUE)
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=4, gridslon=3, map=TRUE, pngtype="cairo-png", varint=FALSE, simp=FALSE, max.trees=28000)
warnings()
setwd("/home/simon/Dropbox/Galway/Project Sections/4b. Methods Paper BRT/Chuck's gbmauto attempts")
sharks<-read.csv("PamlicoSoundSharks.csv", header=TRUE)
grids<-read.csv("FallGrid.csv", header=TRUE, row.names=NULL)
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=4, gridslon=3, map=TRUE, pngtype="cairo-png", varint=FALSE, simp=FALSE, max.trees=28000, getzip = "./GSHHS_shp")
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=4, gridslon=3, map=TRUE, pngtype="cairo-png", varint=FALSE, simp=FALSE, max.trees=28000, getzip = "./GSHHS_shp")
read.shapefile("./CroppedMap/Crop_Map")
chuckmap <- read.shapefile("./CroppedMap/Crop_Map")
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=4, gridslon=3, map=TRUE, pngtype="cairo-png", varint=FALSE, simp=FALSE, max.trees=28000, mapshape = chuckmap)
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "./CroppedMap/Crop_Map")
getwd()
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "/CroppedMap/Crop_Map")
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "./GSHHS_shp")
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "./GSHHS_shp", res = 2)
getwd()
setwd("../")
getwd()
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "./GSHHS_shp", res = 2)
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "./GSHHS_shp", res = 2)
getwd()
setwd("../")
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "./GSHHS_shp", res = 2)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "./GSHHS_shp", res = 2)
setwd("../")
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "./GSHHS_shp", res = 2)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "./GSHHS_shp", res = 2)
setwd("../")
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "./GSHHS_shp", res = 2)
getwd()
setwd("../")
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "GSHHS_shp", res = 2)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
setwd("../")
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "GSHHS_shp", res = 2)
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "./GSHHS_shp", res = 2)
getwd()
setwd("../")
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "GSHHS_shp", res = 2)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
setwd("../")
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "GSHHS_shp", res = 2)
setwd("../")
getwd()
setwd("./GSHHS_shp/c")
world <<- readOGR(dsn = paste("GSHHS_", c, "_L1.shp", sep = ""), layer = paste("GSHHS_", c, "_L1", sep = ""))
world <<- readOGR(dsn = paste("GSHHS_", "c", "_L1.shp", sep = ""), layer = paste("GSHHS_", "c", "_L1", sep = ""))
cropshp <<- crop(world, bounds) # crop to extents
setwd(startdir)
bounds = c(range(grids[,4]),range(grids[,3]))
cropshp <<- crop(world, bounds) # crop to extents
rm(cropshp)
cropshp <<- crop(world, bounds) # crop to extents
setwd("../")
setwd("./f")
world <<- readOGR(dsn = paste("GSHHS_", "f", "_L1.shp", sep = ""), layer = paste("GSHHS_", "f", "_L1", sep = ""))
cropshp <<- crop(world, bounds) # crop to extents
rm(cropshp)
cropshp <<- crop(world, bounds) # crop to extents
getwd()
world2 <- readOGR(dsn = paste("./"), layer = paste("GSHHS_", res, "_L1", sep = ""))
world2 <- readOGR(dsn = "./", layer = paste("GSHHS_", res, "_L1", sep = ""))
world2 <- readOGR(dsn = paste("./",res,sep=""), layer = paste("GSHHS_", res, "_L1", sep = ""))
world2 <- readOGR(dsn = getwd(), layer = paste("GSHHS_", res, "_L1", sep = ""))
res <- f
res <- "f"
world2 <- readOGR(dsn = getwd(), layer = paste("GSHHS_", res, "_L1", sep = ""))
cropshp <<- crop(world, bounds) # crop to extents
cropshp <- crop(world, bounds) # crop to extents
cropshp <<- crop(world, bounds) # crop to extents
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
res <- "f"
setwd("/home/simon/Dropbox/Galway/Project Sections/4b. Methods Paper BRT/Chuck's gbmauto attempts/GSHHS_shp/f/")
world <- readOGR(dsn = paste("GSHHS_", res, "_L1.shp", sep = ""), layer = paste("GSHHS_", res, "_L1", sep = ""))
if (!require(rgdal)) install.packages("rgdal")
library(rgdal) # for readOGR
if (!require(rgeos)) install.packages("rgeos")
library(rgeos) # subfunctions for rgdal & others
if (!require(raster)) install.packages("raster")
library(raster) # for crop
if (!require(maptools)) install.packages("maptools")
library(maptools) # for WriteSpatialShape
world <- readOGR(dsn = paste("GSHHS_", res, "_L1.shp", sep = ""), layer = paste("GSHHS_", res, "_L1", sep = ""))
cropshp <<- crop(world, bounds) # crop to extents
sharks<-read.csv("PamlicoSoundSharks.csv", header=TRUE)
sharks<-read.csv("../../PamlicoSoundSharks.csv", header=TRUE)
bounds <- c(range(sharks[,4]),range(sharks[,3]))
cropshp <<- crop(world, bounds) # crop to extents
setwd(startdir)
getwd()
savename <- "tits"
writeSpatialShape(cropshp, savename)
print(paste("World map cropped and saved successfully"))
cropshp2 <- read.shapefile(savename) #reads back into env in correct format
if (!require(maptools)) install.packages("shapefiles")
library(shapefiles) # for read.shapefile
cropshp2 <- read.shapefile(savename) #reads back into env in correct format
return(cropshp)}
return(cropshp)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
rm(cropshp)
rm(cropshp2)
rm(world)
getwd()
setwd("../../")
getwd()
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
gbm.basemap(bounds = bounds, getzip = "GSHHS_shp", savename = "CMtmp")
chuckmap <- gbm.basemap(bounds = bounds, getzip = "GSHHS_shp", savename = "CMtmp")
getwd()
grids <- read.csv("Abundance_Preds_only_Fall1.csv")
png(filename = "SmoothDog.png", width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0),xpd = FALSE)
gbm.map(x = grids[,1], y = grids[,2], z = grids[,3], species = "SmoothDog", legendtitle = "CPUE", shape = chuckmap)
dev.off()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
install_github(Simon_Dedman/gbm.auto)
install_github("Simon_Dedman/gbm.auto")
install_github("SimonDedman/gbm.auto")
setwd("/home/simon/Dropbox/Galway/Project Sections/4b. Methods Paper BRT/Chuck's gbmauto attempts")
sharks<-read.csv("PamlicoSoundSharks.csv", header=TRUE)
grids<-read.csv("FallGrid.csv", header=TRUE, row.names=NULL)
chuckmap <- gbm.basemap(bounds = bounds, getzip = "GSHHS_shp")
chuckmap <- gbm.basemap(bounds = c(range(sharks[,4]),range(sharks[,3])), getzip = "GSHHS_shp")
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=4, gridslon=3, map=TRUE, pngtype="cairo-png", varint=FALSE, simp=FALSE, max.trees=28000, mapshape = chuckmap)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=4, gridslon=3, map=TRUE, pngtype="cairo-png", varint=FALSE, simp=FALSE, max.trees=28000, mapshape = chuckmap)
library(gbm.auto)
gbm.auto
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=4, gridslon=3, map=TRUE, pngtype="cairo-png", varint=FALSE, simp=FALSE, max.trees=28000, mapshape = chuckmap)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
install_github("SimonDedman/gbm.auto")
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
setwd("/home/simon/Dropbox/Galway/Project Sections/4b. Methods Paper BRT/Chuck's gbmauto attempts")
sharks<-read.csv("PamlicoSoundSharks.csv", header=TRUE)
grids<-read.csv("FallGrid.csv", header=TRUE, row.names=NULL)
chuckmap <- gbm.basemap(bounds = c(range(sharks[,4]),range(sharks[,3])), getzip = "GSHHS_shp")
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=4, gridslon=3, map=TRUE, pngtype="cairo-png", varint=FALSE, simp=FALSE, max.trees=28000, mapshape = chuckmap)
preds <- read.csv("Abundance_Preds_only_Fall1.csv")
png(filename = "SmoothDog2.png", width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0),xpd = FALSE)
gbm.map(x = grids[,1], y = grids[,2], z = grids[,3], species = "SmoothDog", legendtitle = "CPUE", shape = showshape2)
gbm.map(x = preds[,1], y = preds[,2], z = preds[,3], species = "SmoothDog", legendtitle = "CPUE", shape = showshape2)
dev.off()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install_github(SimonDedman/gbm.auto)
install_github("SimonDedman/gbm.auto")
setwd("/home/simon/Dropbox/Galway/Project Sections/4b. Methods Paper BRT/Chuck's gbmauto attempts")
sharks<-read.csv("PamlicoSoundSharks.csv", header=TRUE)
grids<-read.csv("FallGrid.csv", header=TRUE, row.names=NULL)
chuckmap <- gbm.basemap(bounds = c(range(sharks[,4]),range(sharks[,3])), getzip = "GSHHS_shp")
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
chuckmap <- gbm.basemap(bounds = c(range(sharks[,4]),range(sharks[,3])), getzip = "GSHHS_shp")
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=4, gridslon=3, map=TRUE, pngtype="cairo-png", varint=FALSE, simp=FALSE, savegbm=FALSE, RSB=FALSE, BnW=FALSE, mapshape = chuckmap)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
document()
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
install_github("SimonDedman/gbm.auto")
AllPreds_E <- read.csv("~/Dropbox/Galway/Analysis/R/gbm.auto data csvs/AllPreds_E.csv")
View(AllPreds_E)
save(AllPreds_E, file = "AllPreds_E", compress = TRUE, compression_level = 9)
setwd("./Data")
setwd("./data")
save(AllPreds_E, file = "AllPreds_E.Rd", compress = TRUE, compression_level = 9)
save(AllPreds_E, file = "AllPreds_E.Rdata", compress = TRUE, compression_level = 9)
save(AllPreds_E, file = "AllPreds_E.Rdata", compress = "xz")
AllPreds_E <- read.csv("~/Dropbox/Galway/Analysis/R/gbm.auto data csvs/AllPreds_E.csv")
View(AllPreds_E)
save(AllPreds_E, file = "AllPreds_E.Rdata", compress = "xz")
document()
install_github("SimonDedman/gbm.auto")
detach("package:gbm.auto", unload=TRUE)
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
setwd("/home/simon/Dropbox/Galway/Project Sections/4b. Methods Paper BRT/Chuck's gbmauto attempts")
sharks<-read.csv("PamlicoSoundSharks.csv", header=TRUE)
grids<-read.csv("FallGrid.csv", header=TRUE, row.names=NULL)
chuckmap <- gbm.basemap(bounds = c(range(sharks[,4]),range(sharks[,3])), getzip = "GSHHS_shp")
rm(AllPreds_E)
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, gridslat=4, gridslon=3, mapshape = chuckmap)
getwd()
setwd("../../../../")
getwd()
setwd("../")
getwd()
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install_github('SimonDedman/gbm.auto')
mygrids <- gbm.auto::grids
mysamples <- gbm.auto::samples
gbm.auto(grids = mygrids, samples = mysamples, expvar = c(4:9,11), resvar = 12)
require(gbm.auto)
gbm.auto(grids = mygrids, samples = mysamples, expvar = c(4:9,11), resvar = 12)
Adult_Females <- read.csv("~/Dropbox/Galway/Analysis/R/gbm.auto data csvs/NoGrain/Adult_Females.csv")
View(Adult_Females)
Adult_Females2 <- data.frame(Adult_Females[,c(1:8,9:13])
Adult_Females[,c(1:8,9:13]
Adult_Females2 <- data.frame(Adult_Females[,c(1:8,9:13)])
Adult_Females <- Adult_Females2
getwd()
setwd("./Dropbox/Galway/Analysis/R/data")
setwd("./Dropbox/Galway/")
setwd("./Analysis")
setwd("./gbm.auto")
setwd("./R")
setwd("./gbm.auto")
setwd("./data")
getwd()
save(Adult_Females, file = "Adult_Females.Rdata", compress = "xz")
save(Adult_Females, file = "Adult_Females.Rdata", compress = "xz")
grids <- read.csv("~/Dropbox/Galway/Analysis/R/gbm.auto data csvs/NoGrain/grids.csv")
View(grids)
grids2 <- data.frame(grids[,c(1:6,7:44)])
grids2 <- data.frame(grids[,c(1:6,8:44)])
View(grids2)
grids <- grids2
save(grids, file = "grids.Rdata", compress = "xz")
Juveniles <- read.csv("~/Dropbox/Galway/Analysis/R/gbm.auto data csvs/NoGrain/Juveniles.csv")
View(Juveniles)
juveniles2 <- data.frame(juveniles[,c(1:7,9:47)])
Juveniles2 <- data.frame(Juveniles[,c(1:7,9:47)])
View(Juveniles2)
Juveniles <- Juveniles2
save(Juveniles, file = "Juveniles.Rdata", compress = "xz")
samples <- read.csv("~/Dropbox/Galway/Analysis/R/gbm.auto data csvs/NoGrain/samples.csv")
View(samples)
samples2 <- data.frame(samples[,c(1:7,9:15)])
samples <- samples2
save(samples, file = "samples.Rdata", compress = "xz")
Adult_Females <- read.csv("~/Dropbox/Galway/Analysis/R/gbm.auto data csvs/NoGrain/Adult_Females.csv")
View(Adult_Females)
save(Adult_Females, file = "Adult_Females.Rdata", compress = "xz")
samples <- read.csv("~/Dropbox/Galway/Analysis/R/gbm.auto data csvs/NoGrain/samples.csv")
View(samples)
document()
install_github("SimonDedman/gbm.auto")
warnings()
traceback()
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
traceback()
document()
warnings()
