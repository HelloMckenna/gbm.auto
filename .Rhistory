dev.off()
install.packages("shapefiles")
library("shapefiles", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
chuckmap <- read.shapefile("./CroppedMap/Fall_Crop_Map")
png(filename = "./SmoothDogfish/SmoothDogManual2.png", width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0),xpd = FALSE)
gbm.map(x = grids[,3], y = grids[,4], z = preds[,3], species = "SmoothDogfish", legendtitle = "CPUE", shape = chuckmap)
dev.off()
document()
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
devtools::install_github('SimonDedman/gbm.auto', force = TRUE)
setwd("/home/simon/Dropbox/Galway/Project Sections/4b. Methods Paper BRT/Chuck's gbmauto attempts")
sharks<-read.csv("PamlicoSoundSharks.csv", header=TRUE)
grids<-read.csv("FallGrid.csv", header=TRUE, row.names=NULL)
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=4, gridslon=3, map=TRUE, pngtype="cairo-png", varint=FALSE, simp=FALSE, max.trees=28000)
devtools::install_github('SimonDedman/gbm.auto', force = TRUE)
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=4, gridslon=3, map=TRUE, pngtype="cairo-png", varint=FALSE, simp=FALSE, max.trees=28000)
warnings()
setwd("/home/simon/Dropbox/Galway/Project Sections/4b. Methods Paper BRT/Chuck's gbmauto attempts")
sharks<-read.csv("PamlicoSoundSharks.csv", header=TRUE)
grids<-read.csv("FallGrid.csv", header=TRUE, row.names=NULL)
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=4, gridslon=3, map=TRUE, pngtype="cairo-png", varint=FALSE, simp=FALSE, max.trees=28000, getzip = "./GSHHS_shp")
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=4, gridslon=3, map=TRUE, pngtype="cairo-png", varint=FALSE, simp=FALSE, max.trees=28000, getzip = "./GSHHS_shp")
read.shapefile("./CroppedMap/Crop_Map")
chuckmap <- read.shapefile("./CroppedMap/Crop_Map")
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=4, gridslon=3, map=TRUE, pngtype="cairo-png", varint=FALSE, simp=FALSE, max.trees=28000, mapshape = chuckmap)
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "./CroppedMap/Crop_Map")
getwd()
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "/CroppedMap/Crop_Map")
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "./GSHHS_shp")
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "./GSHHS_shp", res = 2)
getwd()
setwd("../")
getwd()
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "./GSHHS_shp", res = 2)
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "./GSHHS_shp", res = 2)
getwd()
setwd("../")
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "./GSHHS_shp", res = 2)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "./GSHHS_shp", res = 2)
setwd("../")
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "./GSHHS_shp", res = 2)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "./GSHHS_shp", res = 2)
setwd("../")
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "./GSHHS_shp", res = 2)
getwd()
setwd("../")
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "GSHHS_shp", res = 2)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
setwd("../")
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "GSHHS_shp", res = 2)
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "./GSHHS_shp", res = 2)
getwd()
setwd("../")
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "GSHHS_shp", res = 2)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
setwd("../")
gbm.basemap(bounds = c(range(grids[,4]),range(grids[,3])), getzip = "GSHHS_shp", res = 2)
setwd("../")
getwd()
setwd("./GSHHS_shp/c")
world <<- readOGR(dsn = paste("GSHHS_", c, "_L1.shp", sep = ""), layer = paste("GSHHS_", c, "_L1", sep = ""))
world <<- readOGR(dsn = paste("GSHHS_", "c", "_L1.shp", sep = ""), layer = paste("GSHHS_", "c", "_L1", sep = ""))
cropshp <<- crop(world, bounds) # crop to extents
setwd(startdir)
bounds = c(range(grids[,4]),range(grids[,3]))
cropshp <<- crop(world, bounds) # crop to extents
rm(cropshp)
cropshp <<- crop(world, bounds) # crop to extents
setwd("../")
setwd("./f")
world <<- readOGR(dsn = paste("GSHHS_", "f", "_L1.shp", sep = ""), layer = paste("GSHHS_", "f", "_L1", sep = ""))
cropshp <<- crop(world, bounds) # crop to extents
rm(cropshp)
cropshp <<- crop(world, bounds) # crop to extents
getwd()
world2 <- readOGR(dsn = paste("./"), layer = paste("GSHHS_", res, "_L1", sep = ""))
world2 <- readOGR(dsn = "./", layer = paste("GSHHS_", res, "_L1", sep = ""))
world2 <- readOGR(dsn = paste("./",res,sep=""), layer = paste("GSHHS_", res, "_L1", sep = ""))
world2 <- readOGR(dsn = getwd(), layer = paste("GSHHS_", res, "_L1", sep = ""))
res <- f
res <- "f"
world2 <- readOGR(dsn = getwd(), layer = paste("GSHHS_", res, "_L1", sep = ""))
cropshp <<- crop(world, bounds) # crop to extents
cropshp <- crop(world, bounds) # crop to extents
cropshp <<- crop(world, bounds) # crop to extents
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
res <- "f"
setwd("/home/simon/Dropbox/Galway/Project Sections/4b. Methods Paper BRT/Chuck's gbmauto attempts/GSHHS_shp/f/")
world <- readOGR(dsn = paste("GSHHS_", res, "_L1.shp", sep = ""), layer = paste("GSHHS_", res, "_L1", sep = ""))
if (!require(rgdal)) install.packages("rgdal")
library(rgdal) # for readOGR
if (!require(rgeos)) install.packages("rgeos")
library(rgeos) # subfunctions for rgdal & others
if (!require(raster)) install.packages("raster")
library(raster) # for crop
if (!require(maptools)) install.packages("maptools")
library(maptools) # for WriteSpatialShape
world <- readOGR(dsn = paste("GSHHS_", res, "_L1.shp", sep = ""), layer = paste("GSHHS_", res, "_L1", sep = ""))
cropshp <<- crop(world, bounds) # crop to extents
sharks<-read.csv("PamlicoSoundSharks.csv", header=TRUE)
sharks<-read.csv("../../PamlicoSoundSharks.csv", header=TRUE)
bounds <- c(range(sharks[,4]),range(sharks[,3]))
cropshp <<- crop(world, bounds) # crop to extents
setwd(startdir)
getwd()
savename <- "tits"
writeSpatialShape(cropshp, savename)
print(paste("World map cropped and saved successfully"))
cropshp2 <- read.shapefile(savename) #reads back into env in correct format
if (!require(maptools)) install.packages("shapefiles")
library(shapefiles) # for read.shapefile
cropshp2 <- read.shapefile(savename) #reads back into env in correct format
return(cropshp)}
return(cropshp)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
rm(cropshp)
rm(cropshp2)
rm(world)
getwd()
setwd("../../")
getwd()
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
gbm.basemap(bounds = bounds, getzip = "GSHHS_shp", savename = "CMtmp")
chuckmap <- gbm.basemap(bounds = bounds, getzip = "GSHHS_shp", savename = "CMtmp")
getwd()
grids <- read.csv("Abundance_Preds_only_Fall1.csv")
png(filename = "SmoothDog.png", width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0),xpd = FALSE)
gbm.map(x = grids[,1], y = grids[,2], z = grids[,3], species = "SmoothDog", legendtitle = "CPUE", shape = chuckmap)
dev.off()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.basemap.R')
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
install_github(Simon_Dedman/gbm.auto)
install_github("Simon_Dedman/gbm.auto")
install_github("SimonDedman/gbm.auto")
setwd("/home/simon/Dropbox/Galway/Project Sections/4b. Methods Paper BRT/Chuck's gbmauto attempts")
sharks<-read.csv("PamlicoSoundSharks.csv", header=TRUE)
grids<-read.csv("FallGrid.csv", header=TRUE, row.names=NULL)
chuckmap <- gbm.basemap(bounds = bounds, getzip = "GSHHS_shp")
chuckmap <- gbm.basemap(bounds = c(range(sharks[,4]),range(sharks[,3])), getzip = "GSHHS_shp")
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=4, gridslon=3, map=TRUE, pngtype="cairo-png", varint=FALSE, simp=FALSE, max.trees=28000, mapshape = chuckmap)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=4, gridslon=3, map=TRUE, pngtype="cairo-png", varint=FALSE, simp=FALSE, max.trees=28000, mapshape = chuckmap)
library(gbm.auto)
gbm.auto
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=4, gridslon=3, map=TRUE, pngtype="cairo-png", varint=FALSE, simp=FALSE, max.trees=28000, mapshape = chuckmap)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
install_github("SimonDedman/gbm.auto")
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
setwd("/home/simon/Dropbox/Galway/Project Sections/4b. Methods Paper BRT/Chuck's gbmauto attempts")
sharks<-read.csv("PamlicoSoundSharks.csv", header=TRUE)
grids<-read.csv("FallGrid.csv", header=TRUE, row.names=NULL)
chuckmap <- gbm.basemap(bounds = c(range(sharks[,4]),range(sharks[,3])), getzip = "GSHHS_shp")
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=4, gridslon=3, map=TRUE, pngtype="cairo-png", varint=FALSE, simp=FALSE, max.trees=28000, mapshape = chuckmap)
preds <- read.csv("Abundance_Preds_only_Fall1.csv")
png(filename = "SmoothDog2.png", width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0),xpd = FALSE)
gbm.map(x = grids[,1], y = grids[,2], z = grids[,3], species = "SmoothDog", legendtitle = "CPUE", shape = showshape2)
gbm.map(x = preds[,1], y = preds[,2], z = preds[,3], species = "SmoothDog", legendtitle = "CPUE", shape = showshape2)
dev.off()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install_github(SimonDedman/gbm.auto)
install_github("SimonDedman/gbm.auto")
setwd("/home/simon/Dropbox/Galway/Project Sections/4b. Methods Paper BRT/Chuck's gbmauto attempts")
sharks<-read.csv("PamlicoSoundSharks.csv", header=TRUE)
grids<-read.csv("FallGrid.csv", header=TRUE, row.names=NULL)
chuckmap <- gbm.basemap(bounds = c(range(sharks[,4]),range(sharks[,3])), getzip = "GSHHS_shp")
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
chuckmap <- gbm.basemap(bounds = c(range(sharks[,4]),range(sharks[,3])), getzip = "GSHHS_shp")
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, tc = 2, gridslat=4, gridslon=3, map=TRUE, pngtype="cairo-png", varint=FALSE, simp=FALSE, savegbm=FALSE, RSB=FALSE, BnW=FALSE, mapshape = chuckmap)
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
document()
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
source('~/Dropbox/Galway/Analysis/R/gbm.auto/R/gbm.auto.R')
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
install_github("SimonDedman/gbm.auto")
AllPreds_E <- read.csv("~/Dropbox/Galway/Analysis/R/gbm.auto data csvs/AllPreds_E.csv")
View(AllPreds_E)
save(AllPreds_E, file = "AllPreds_E", compress = TRUE, compression_level = 9)
setwd("./Data")
setwd("./data")
save(AllPreds_E, file = "AllPreds_E.Rd", compress = TRUE, compression_level = 9)
save(AllPreds_E, file = "AllPreds_E.Rdata", compress = TRUE, compression_level = 9)
save(AllPreds_E, file = "AllPreds_E.Rdata", compress = "xz")
AllPreds_E <- read.csv("~/Dropbox/Galway/Analysis/R/gbm.auto data csvs/AllPreds_E.csv")
View(AllPreds_E)
save(AllPreds_E, file = "AllPreds_E.Rdata", compress = "xz")
document()
install_github("SimonDedman/gbm.auto")
detach("package:gbm.auto", unload=TRUE)
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
setwd("/home/simon/Dropbox/Galway/Project Sections/4b. Methods Paper BRT/Chuck's gbmauto attempts")
sharks<-read.csv("PamlicoSoundSharks.csv", header=TRUE)
grids<-read.csv("FallGrid.csv", header=TRUE, row.names=NULL)
chuckmap <- gbm.basemap(bounds = c(range(sharks[,4]),range(sharks[,3])), getzip = "GSHHS_shp")
rm(AllPreds_E)
gbm.auto(expvar = c(8:13), resvar = 18, grids = grids, samples = sharks, lr = 0.001, bf = 0.75, gridslat=4, gridslon=3, mapshape = chuckmap)
getwd()
setwd("../../../../")
getwd()
setwd("../")
getwd()
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install_github('SimonDedman/gbm.auto')
mygrids <- gbm.auto::grids
mysamples <- gbm.auto::samples
gbm.auto(grids = mygrids, samples = mysamples, expvar = c(4:9,11), resvar = 12)
require(gbm.auto)
gbm.auto(grids = mygrids, samples = mysamples, expvar = c(4:9,11), resvar = 12)
Adult_Females <- read.csv("~/Dropbox/Galway/Analysis/R/gbm.auto data csvs/NoGrain/Adult_Females.csv")
View(Adult_Females)
Adult_Females2 <- data.frame(Adult_Females[,c(1:8,9:13])
Adult_Females[,c(1:8,9:13]
Adult_Females2 <- data.frame(Adult_Females[,c(1:8,9:13)])
Adult_Females <- Adult_Females2
getwd()
setwd("./Dropbox/Galway/Analysis/R/data")
setwd("./Dropbox/Galway/")
setwd("./Analysis")
setwd("./gbm.auto")
setwd("./R")
setwd("./gbm.auto")
setwd("./data")
getwd()
save(Adult_Females, file = "Adult_Females.Rdata", compress = "xz")
save(Adult_Females, file = "Adult_Females.Rdata", compress = "xz")
grids <- read.csv("~/Dropbox/Galway/Analysis/R/gbm.auto data csvs/NoGrain/grids.csv")
View(grids)
grids2 <- data.frame(grids[,c(1:6,7:44)])
grids2 <- data.frame(grids[,c(1:6,8:44)])
View(grids2)
grids <- grids2
save(grids, file = "grids.Rdata", compress = "xz")
Juveniles <- read.csv("~/Dropbox/Galway/Analysis/R/gbm.auto data csvs/NoGrain/Juveniles.csv")
View(Juveniles)
juveniles2 <- data.frame(juveniles[,c(1:7,9:47)])
Juveniles2 <- data.frame(Juveniles[,c(1:7,9:47)])
View(Juveniles2)
Juveniles <- Juveniles2
save(Juveniles, file = "Juveniles.Rdata", compress = "xz")
samples <- read.csv("~/Dropbox/Galway/Analysis/R/gbm.auto data csvs/NoGrain/samples.csv")
View(samples)
samples2 <- data.frame(samples[,c(1:7,9:15)])
samples <- samples2
save(samples, file = "samples.Rdata", compress = "xz")
Adult_Females <- read.csv("~/Dropbox/Galway/Analysis/R/gbm.auto data csvs/NoGrain/Adult_Females.csv")
View(Adult_Females)
save(Adult_Females, file = "Adult_Females.Rdata", compress = "xz")
samples <- read.csv("~/Dropbox/Galway/Analysis/R/gbm.auto data csvs/NoGrain/samples.csv")
View(samples)
document()
install_github("SimonDedman/gbm.auto")
warnings()
traceback()
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
traceback()
document()
warnings()
getwd()
library(gbm.auto)
setwd("/home/simon/Desktop/gbm temp/Cuckoo/Bin_Bars.png")
setwd("/home/simon/Desktop/gbm temp")
data(coast, package = "mapplots")
mygrids <- gbm.auto::grids # load grids
mysamples <- gbm.auto::samples
gbm.auto(grids = mygrids, samples = mysamples, expvar = c(4:8,10), resvar = 11, mapshape = coast, savegbm=FALSE, BnW = FALSE, map = FALSE, RSB = FALSE, varint = FALSE, simp = FALSE)
library(gbm.auto)
library("mapplots", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
data(coast, package = "maptools")
data(coast, package = "mapplots")
getwd()
gbm.auto(grids = mygrids, samples = mysamples, lr = 0.01, expvar = c(4:8,10), resvar = 11, mapshape = coast, savegbm=FALSE, BnW = FALSE, map = FALSE, RSB = FALSE, varint = FALSE, simp = FALSE)
library(gbm.auto)
getwd()
gbm.auto(grids = mygrids, samples = mysamples, lr = 0.01, expvar = c(4:8,10), resvar = 11, mapshape = coast, savegbm=FALSE, BnW = FALSE, map = FALSE, RSB = FALSE, varint = FALSE, simp = FALSE)
library(gbm.auto)
gbm.auto(grids = mygrids, samples = mysamples, lr = 0.01, expvar = c(4:8,10), resvar = 11, mapshape = coast, savegbm=FALSE, BnW = FALSE, map = FALSE, RSB = FALSE, varint = FALSE, simp = FALSE)
gbm.auto(grids = mygrids, samples = mysamples, lr = 0.01, expvar = c(4:8,10), resvar = 11, mapshape = coast, savegbm=FALSE, BnW = FALSE, RSB = FALSE, varint = FALSE, simp = FALSE)
autocoast <- read.shapefile("./CroppedMap/Crop_Map")
library("shapefiles", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
autocoast <- read.shapefile("./CroppedMap/Crop_Map")
gbm.auto(grids = mygrids, samples = mysamples, lr = 0.01, expvar = c(4:8,10), resvar = 11, mapshape = autocoast, savegbm=FALSE, BnW = FALSE, RSB = FALSE, varint = FALSE, simp = FALSE)
write.shapefile(coast, coast)
write.shapefile(coast, coast.shp)
write.shapefile(coast, "coast")
getwd()
bounds <- c(range(grids[,1]),range(grids[,2])
bounds <- c(range(grids[,1]),range(grids[,2]))
basemap
gridslon <- 1
gridslat <- 2
bounds2 <- c(min(grids[,gridslon]),
max(grids[,gridslon]),
min(grids[,gridslat]),
max(grids[,gridslat]))
average(bounds[1], bounds[2])
mean(bounds[1], bounds[2])
bounds[2]
bounds[1]
base::mean(bounds[1], bounds[2])
base::mean(c(bounds[1], bounds[2]))
base::mean(bounds[1:2])
base::mean(bounds[3:4])
xmid <- base::mean(bounds[1:2])
ymid <- base::mean(bounds[3:4])
xmid - bounds[1]
bounds[2] - xmid
55-52
base::mean(bounds[3:4], trim=0)
(bounds[2]-bounds[1])/2
(bounds[4]-bounds[3])/2
bounds[3]
bounds[4]
ymid/2
ymid
xmid
bounds[2]-xmid
((bounds[2]-xmid)*1.5)+xmid
((xmid-bounds[1])*1.5)-xmid
((xmid-bounds[1])*1.5)+xmid
xmid-((bounds[2]-xmid)*1.5)
xmid-((xmid-bounds[1])*1.5)
xextramax <- ((bounds[2]-xmid)*1.5)+xmid
xextramin <- xmid-((xmid-bounds[1])*1.5)
yextramax <- ((bounds[4]-ymid)*1.5)+xmid
yextramin <- xmid-((ymid-bounds[3])*1.5)
yextramax <- ((bounds[4]-ymid)*1.5)+ymid
yextramin <- ymid-((ymid-bounds[3])*1.5)
xextramax <- ((bounds[2]-xmid)*1.6)+xmid
xextramin <- xmid-((xmid-bounds[1])*1.6)
yextramax <- ((bounds[4]-ymid)*1.6)+ymid
yextramin <- ymid-((ymid-bounds[3])*1.6)
extrabounds <- c(xextramin, xextramax, yextramin, yextramax)
library(gbm.auto)
warnings()
getwd()
mygrids <- gbm.auto::grids # load grids
mysamples <- gbm.auto::samples
gbm.auto(grids = mygrids, samples = mysamples, lr = 0.01, expvar = c(4:8,10), resvar = 11, savegbm=FALSE, BnW = FALSE, RSB = FALSE, varint = FALSE, simp = FALSE)
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
document()
document()
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
subsets <- c("Juveniles", "Adult Females")
subsets <- c("Juveniles", "Adult Females")
Juveniles <- gbm.auto::Juveniles
Adult_Females <- gbm.auto::Adult_Females
for (i in 1:length(subsets)) {  #currently 2
getwd()
setwd(/home/simon/Desktop/gbm temp/"")
setwd("/home/simon/Desktop/gbm temp/")
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
mygrids <- gbm.auto::grids # load grids
mysamples <- gbm.auto::samples
gbm.auto(grids = mygrids, samples = mysamples, expvar = c(4:8,10), resvar = 11)
getwd()
dir.create("Valuemaps")
setwd("Valuemaps")
conserve <- gbm.auto::AllScaledData
mydata <- gbm.auto::AllPreds_E
mydata <- cbind(mydata, conserve = conserve[,3])
dir.create("Standard")
dir.create("Goodweight 10s")
dir.create("Badweight 10")
dir.create("Goodweight 4 3.5 1.5 1")
setwd("Standard")
gbm.valuemap(dbase = mydata, loncolno = 2, latcolno = 1, goodcols = c(3,5,6,4), badcols = 7, conservecol = 8, HRMSY = c(0.08,0.14,0.08,0.15))
setwd("/home/simon/Desktop/gbm temp/Valuemaps/Standard/")
library("shapefiles", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
Crop_Map <- read.shapefile("./CroppedMap/Crop_Map.shp")
Crop_Map <- read.shapefile("./CroppedMap/Crop_Map")
conserve <- gbm.auto::AllScaledData # load data from gbm.cons.
mydata <- gbm.auto::AllPreds_E # load dataset with latitude, longitude, fishing fleet effort and all four rays’ predicted CPUE.
mydata <- cbind(mydata, conserve = conserve[,3])
gbm.valuemap(dbase = mydata, loncolno = 2, latcolno = 1, goodcols = c(3,5,6,4), badcols = 7, conservecol = 8, HRMSY = c(0.08,0.14,0.08,0.15), mapshape = Crop_Map)
png(filename = paste("./",badname,"_Map.png",sep = ""),
width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = pngtype)
par(mar = c(3.2,3,1.3,0), las = 1, mgp = c(2.1,0.5,0),xpd = FALSE)
gbm.valuemap(dbase = mydata, loncolno = 2, latcolno = 1, goodcols = c(3,5,6,4), badcols = 7, conservecol = 8, HRMSY = c(0.08,0.14,0.08,0.15), mapshape = Crop_Map)
traceback()
library(gbm.auto)
gbm.valuemap(dbase = mydata, loncolno = 2, latcolno = 1, goodcols = c(3,5,6,4), badcols = 7, conservecol = 8, HRMSY = c(0.08,0.14,0.08,0.15), mapshape = Crop_Map)
library(gbm.auto)
getwd()
gbm.valuemap(dbase = mydata, loncolno = 2, latcolno = 1, goodcols = c(3,5,6,4), badcols = 7, conservecol = 8, HRMSY = c(0.08,0.14,0.08,0.15), mapshape = Crop_Map)
library(gbm.auto)
gbm.valuemap(dbase = mydata, loncolno = 2, latcolno = 1, goodcols = c(3,5,6,4), badcols = 7, conservecol = 8, HRMSY = c(0.08,0.14,0.08,0.15), mapshape = Crop_Map)
library(gbm.auto)
gbm.valuemap(dbase = mydata, loncolno = 2, latcolno = 1, goodcols = c(3,5,6,4), badcols = 7, conservecol = 8, HRMSY = c(0.08,0.14,0.08,0.15), mapshape = Crop_Map)
library(gbm.auto)
gbm.valuemap(dbase = mydata, loncolno = 2, latcolno = 1, goodcols = c(3,5,6,4), badcols = 7, conservecol = 8, HRMSY = c(0.08,0.14,0.08,0.15), mapshape = Crop_Map)
gbm.valuemap(dbase = mydata, loncolno = 2, latcolno = 1, goodcols = c(3,5,6,4), badcols = 7, conservecol = 8, HRMSY = c(0.08,0.14,0.08,0.15), mapshape = Crop_Map, BnW = FALSE)
library(gbm.auto)
gbm.valuemap(dbase = mydata, loncolno = 2, latcolno = 1, goodcols = c(3,5,6,4), badcols = 7, conservecol = 8, HRMSY = c(0.08,0.14,0.08,0.15), mapshape = Crop_Map, BnW = FALSE)
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library("gbm.auto", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
conserve <- gbm.auto::AllScaledData # load data from gbm.cons.
mydata <- gbm.auto::AllPreds_E # load dataset with latitude, longitude, fishing fleet effort and all four rays’ predicted CPUE.
mydata <- cbind(mydata, conserve = conserve[,3])
getwd()
setwd("/home/simon/Desktop/gbm temp/Valuemaps/Badweight 10/")
gbm.valuemap(dbase = mydata, loncolno = 2, latcolno = 1, goodcols = c(3,5,6,4), badcols = 7, conservecol = 8, HRMSY = c(0.08,0.14,0.08,0.15), badweight = 10)
Crop_Map <- read.shapefile("../../CroppedMap/Crop_Map")
gbm.valuemap(dbase = mydata, loncolno = 2, latcolno = 1, goodcols = c(3,5,6,4), badcols = 7, conservecol = 8, HRMSY = c(0.08,0.14,0.08,0.15), badweight = 10, mapshape = Crop_Map)
install_github("SimonDedman/gbm.auto")
gbm.valuemap(dbase = mydata, loncolno = 2, latcolno = 1, goodcols = c(3,5,6,4), badcols = 7, conservecol = 8, HRMSY = c(0.08,0.14,0.08,0.15), badweight = 10, mapshape = Crop_Map)
setwd("/home/simon/Desktop/gbm temp/Valuemaps/Goodweight 10s/")
gbm.valuemap(dbase = mydata, loncolno = 2, latcolno = 1, goodcols = c(3,5,6,4), badcols = 7, conservecol = 8, HRMSY = c(0.08,0.14,0.08,0.15), goodweight = c(10,10,10,10), mapshape = Crop_Map)
setwd("../Goodweight 4 3.5 1.5 1")
gbm.valuemap(dbase = mydata, loncolno = 2, latcolno = 1, goodcols = c(3,5,6,4), badcols = 7, conservecol = 8, HRMSY = c(0.08,0.14,0.08,0.15), goodweight = c(4,3.5,1.5,1), mapshape = Crop_Map)
setwd("/home/simon/Desktop/gbm temp/Cuckoo/")
data <- gbm.auto::Abundance_Preds_Only
data <- gbm.auto::AllPreds_E
png(filename = paste("./Cuckoo_Map2.png",sep=""), width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png") # opens the PNG image format writing process
par(mar=c(3.2,3,1.3,0), las=1, mgp=c(2.1,0.5,0),xpd=FALSE) # sets plot boundaries and sizes
gbm.map(x = data[,1], y = data[,2], z = data[,3], mapmain = "CPUE: ", species = "Cuckoo Ray", legendtitle = "CPUE", shape = Crop_Map)
gbm.map(x = data[,2], y = data[,1], z = data[,3], mapmain = "CPUE: ", species = "Cuckoo Ray", legendtitle = "CPUE", shape = Crop_Map)
dev.off()
grids <- gbm.auto::grids
gridslat = 2 # label the latitude and longitude columns
gridslon = 1
bounds <- c(range(grids[,gridslon], range(grids[,gridslat])
bounds <- c(range(grids[,gridslon], range(grids[,gridslat])))
mymap <- gbm.basemap(bounds = bounds)
document()
bounds <- c(range(grids[,gridslon]), range(grids[,gridslat]))
mymap <- gbm.basemap(bounds = bounds)
mygrids <- gbm.auto::grids  # load grids
mysamples <- gbm.auto::samples  # load samples
expvar = c(4:10)
rsbdf_bin <- gbm.rsb(samples = mysamples, grids = mygrids, expvarnames = names(mysamples[expvar]), gridslat = 2, gridslon = 1)
pos_samples <- subset(samples, brv >0)
pos_samples <- subset(mysamples, brv >0)
samples$brv <- ifelse(mysamples[i] > 0, 1, 0)
resvar = 11
mysamples$brv <- ifelse(mysamples[11] > 0, 1, 0)
pos_samples <- subset(mysamples, brv >0)
rsbdf_gaus <- gbm.rsb(samples = pos_samples, grids = grids, names(mysamples[expvar]), gridslat = 2, gridslon = 1)
png(filename = "Cuckoo_RSB_Bin.png", width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar=c(3.2,3,1.3,0), las=1, mgp=c(2.1,0.5,0),xpd=FALSE)
gbm.map(x = mygrids[,1], y = mygrids[,2], z = rsbdf_bin[,"Unrepresentativeness"], mapmain = "Unrepresentativeness: ", species = “Cuckoo Ray”, legendtitle = "UnRep 0-1", shape = Crop_Map)
gbm.map(x = mygrids[,1], y = mygrids[,2], z = rsbdf_bin[,"Unrepresentativeness"], mapmain = "Unrepresentativeness: ", species = "Cuckoo Ray", legendtitle = "UnRep 0-1", shape = Crop_Map)
dev.off()
getwd()
png(filename = "Cuckoo_RSB_Gaus.png", width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar=c(3.2,3,1.3,0), las=1, mgp=c(2.1,0.5,0),xpd=FALSE)
gbm.map(x = mygrids[,1], y = mygrids[,2], z = rsbdf_gaus[,"Unrepresentativeness"], mapmain = "Unrepresentativeness: ", species = "Cuckoo Ray", legendtitle = "UnRep 0-1", shape = Crop_Map)
dev.off()
png(filename = "Cuckoo_RSB_Both.png", width = 4*1920, height = 4*1920, units = "px", pointsize = 4*48, bg = "white", res = NA, family = "", type = "cairo-png")
par(mar=c(3.2,3,1.3,0), las=1, mgp=c(2.1,0.5,0),xpd=FALSE)
gbm.map(x = mygrids[,1], y = mygrids[,2], z = rsbdf_bin[,"Unrepresentativeness"] + rsbdf_gaus[,"Unrepresentativeness"], mapmain = "Unrepresentativeness: ", species = "Cuckoo Ray", legendtitle = "UnRep 0-1", shape = Crop_Map)
dev.off()
getwd()
setwd("../")
getwd()
dir.create("Cons") # Create a subfolder called “Cons”
setwd("./Cons")
gbm.cons(mygrids = mygrids,
subsets = c("Juveniles", "Adult Females"),
conssamples = c("../Sample Data/Juveniles.csv", "../Sample Data/Adult_Females.csv"),
alerts = TRUE, map = TRUE, BnW = TRUE,
resvars = c(43:46,10:13),
gbmautos = TRUE,
expvars = list(c(4:10,14,16,20,24,28,36),
c(4:10,14,17,21,25,29,37),
c(4:10,14,18,22,26,30),
c(4:10,14,19,23,27,31,38),
4:9, 4:9, 4:9, 4:9), # 8 entries, 8 gbm.auto runs
tcs = list(c(2,13), c(2,13), 12, c(2,13), c(2,6), c(2,6), 6, c(2,6)), # blonde ray values exclude 2s because they caused failures, and are only 12 because adult blonde rays are not included as predators
lrs = list(c(0.01,0.005), c(0.01,0.005), 0.005, c(0.01,0.005), 0.005, 0.005, 0.005, 0.005), # 0.01 lrs fail for the more data-limited subsets and were removed
zeroes = rep(FALSE,8))
Juveniles <- gbm.auto::Juveniles # load juveniles subset
Adult_Females <- gbm.auto::Adult_Females # load adult females subset
subsets = c("Juveniles", "Adult Females")
subsets[1]
get(subsets[1])
getwd()
mygrids <- gbm.auto::grids # load grids file
Juveniles <- gbm.auto::Juveniles # load juveniles subset
Adult_Females <- gbm.auto::Adult_Females
library(gbm.auto)
getwd()
gbm.cons(mygrids = mygrids,
subsets = c("Juveniles", "Adult Females"), #specify subset objects
#conssamples = c("../Sample Data/Juveniles.csv", "../Sample Data/Adult_Females.csv"),
alerts = TRUE, map = TRUE, BnW = TRUE,
resvars = c(43:46,10:13),
gbmautos = TRUE,
expvars = list(c(4:10,14,16,20,24,28,36),
c(4:10,14,17,21,25,29,37),
c(4:10,14,18,22,26,30),
c(4:10,14,19,23,27,31,38),
4:9, 4:9, 4:9, 4:9), # 8 entries, 8 gbm.auto runs
tcs = list(c(2,13), c(2,13), 12, c(2,13), c(2,6), c(2,6), 6, c(2,6)), # blonde ray values exclude 2s because they caused failures, and are only 12 because adult blonde rays are not included as predators
lrs = list(c(0.01,0.005), c(0.01,0.005), 0.005, c(0.01,0.005), 0.005, 0.005, 0.005, 0.005), # 0.01 lrs fail for the more data-limited subsets and were removed
zeroes = rep(FALSE,8))
document()
